#include <stdio.h>
#include<iostream>
#include<vector>

using namespace std;

void findUnionAndIntersection(vector<int> &v1, vector<int> &v2){
    
    int i = 0 ;
    int j = 0;
    size_t x = v1.size() ;
    size_t y = v2.size() ;
    vector<int> unionA;
    vector<int> intersectionA;
    
    if(x == 0 ){
        //union
        for(int x1 = 0 ; x1 < v2.size() ; x1++){
            cout<<v2[x1]<<" ";
        }
        cout<<endl;
        cout<<0;
        cout<<endl;
        return ;
        
    }
    
    if(y == 0 ){
        for(int x2 = 0 ; x2 < v1.size() ; x2++){
            cout<<v1[x2]<<" ";
        }
        
        cout<<endl;
        cout<<0;
        cout<<endl;
        return;
    }
    if(x == 0 && y == 0 ){
        return ;
        
    }
    
    while(i!=x  && j!=y){
        if(v1[i] > v2[j]){
            
            unionA.push_back(v2[j]);
            j++;
        }
        else if(v1[i] < v2[j]){
            unionA.push_back(v1[i]);
            i++;
        }
        else{
            unionA.push_back(v1[i]);
            intersectionA.push_back(v1[i]);
            i++;
            j++;
        }
    }
    if(i==x && j!= y){
        while(j!=y){
            if(v2[j]!=v2[j-1]){
                unionA.push_back(v2[j]);
                
            }
            j++;
            
        }
        
    }
    if(i!=x && j == y){
        while(i!=x){
            if(v1[i]!=v1[i-1])
                unionA.push_back(v1[i]);
            i++;
            
        }
        
    }
    //printing union
    i = 0;
    j = 0;
    for( i = 0 ; i < unionA.size() ; i++){
        cout<<unionA[i]<<" ";
        
    }
    cout<<endl;
    //printing Intersection
    for( j = 0 ; j < intersectionA.size() ; j++){
        cout<<intersectionA[j]<<" ";
    }
    cout<<endl;
    return;
}

int main() {
    
    int t, s1, s2, num;
    cin>>t ;
    
    while(--t>=0){
        
        cin>>s1;
        cin>>s2;
        
        vector<int> v1, v2;
        v1.reserve(s1);
        v2.reserve(s2);
        
        for(int  i = 0 ; i < s1 ; i++){
            cin>>num;
            v1.push_back(num);
        }
        for(int j = 0 ; j < s2 ; j++){
            cin>>num;
            v2.push_back(num);
        }
        findUnionAndIntersection(v1, v2);
        
    }
    return 0;
}
